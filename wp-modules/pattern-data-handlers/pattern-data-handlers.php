<?php
/**
 * Module Name: Pattern Data Handlers
 * Description: This module contains functions for getting and saving pattern data.
 * Namespace: PatternDataHandlers
 *
 * @package fse-theme-manager
 */

declare(strict_types=1);

namespace FseThemeManager\PatternDataHandlers;

// Exit if accessed directly.
if ( ! defined( 'ABSPATH' ) ) {
	exit;
}

/**
 * A the data for a single pattern.
 *
 * @param string $pattern_id The name of the pattern to get.
 * @return array
 */
function get_pattern( $pattern_id ) {
	$patterns_data = get_patterns();

	return $patterns_data[ $pattern_id ];
}

/**
 * Get the data for all patterns available.
 *
 * @return array
 */
function get_patterns() {
	$module_dir_path = module_dir_path( __FILE__ );

	/**
	 * Scan Patterns directory and auto require all PHP files, and register them as block patterns.
	 */
	$pattern_file_paths = glob( $module_dir_path . '/pattern-files/*.php' );

	$patterns = array();

	foreach ( $pattern_file_paths as $path ) {
		$pattern_data         = require $path;
		$pattern_data['name'] = basename( $path, '.php' );
		// $pattern_data['content'] = serialize_blocks( $pattern_data['content'] );
		$patterns[ basename( $path, '.php' ) ] = $pattern_data;
	}

	return $patterns;
}

/**
 * Update a single pattern.
 *
 * @param array $pattern Data about the pattern.
 * @return bool
 */
function update_pattern( $pattern ) {

	// Spin up the filesystem api.
	$wp_filesystem = \FseThemeManager\GetWpFilesystem\get_wp_filesystem_api();

	// Build the files for the theme, located in wp-content/themes/.
	$wp_content_dir = $wp_filesystem->wp_content_dir();
	$theme_dir      = $wp_content_dir . 'plugins/fse-theme-manager/';
	$patterns_dir   = $theme_dir . 'wp-modules/pattern-data-handlers/pattern-files/';

	$file_contents = contruct_pattern_php_file_contents( $pattern, 'frost' );

	// Convert the collection array into a file, and place it.
	$pattern_file_created = $wp_filesystem->put_contents(
		$patterns_dir . sanitize_title( $pattern['name'] ) . '.php',
		$file_contents,
		FS_CHMOD_FILE
	);

	return $pattern_file_created;
}

/**
 * Returns a string containing the code for a pattern file.
 *
 * @param array  $pattern Data about the pattern.
 * @param string $text_domain The text domain to use for any localization required.
 * @return bool
 */
function contruct_pattern_php_file_contents( $pattern, $text_domain ) {
	// phpcs:ignore
	$file_contents = "<?php
/**
 * Frost: " . $pattern['title'] . "
 *
 * @package fse-theme-manager
 */

return array(
	'title'         => __( '" . $pattern['title'] . "', '" . $text_domain . "' ),
	'name'          => '" . $pattern['name'] . "',
	'categories'    => array( '" . implode( ', ', $pattern['categories'] ) . "' ),
	'viewportWidth' => " . ( $pattern['viewportWidth'] ? $pattern['viewportWidth'] : '1280' ) . ",
	'content'       => '" . prepare_content( $pattern['content'], $text_domain ) . "',
);
";
	return $file_contents;
}

/**
 * Prepare pattern html to be written into a file.
 *
 * @param string $pattern_html The pattern HTML code, generated by Gutenberg functions.
 * @param string $text_domain The text domain to use for any localization required.
 * @return bool
 */
function prepare_content( $pattern_html, $text_domain ) {
	// $blocks_array = parse_blocks( $pattern_html );

	// First, escape any single apostophes. We do this first because localization will break out of the string and we don't want to escape those.
	// $pattern_html = addcslashes( $pattern_html, "'" );

	// Select any text inside an anchor tag that needs to be localized.
	// preg_match_all( '/<a(.*?)>\K(.*?)(?:(?!<\/a>).)*/', $pattern_html, $output_array );

	// Loop through each anchor tag and localize it's contents.
	// foreach ( $output_array[0] as $string_to_localize ) {
		// $pattern_html = str_replace( $string_to_localize, "' . esc_html__( '" . $string_to_localize . "', '" . $text_domain  . "' ) . '", $pattern_html );
	// }

	// Select any text inside an paragraph tag that needs to be localized.
	// Commented out because a tags often site inside p tags and create adouble escape. Need to fix regex.

	// preg_match_all( '/<p(.*?)>\K(.*?)(?:(?!<\/p>).)*/', $pattern_html, $output_array );

	// Loop through each anchor tag and localize it's contents.
	// foreach ( $output_array[0] as $string_to_localize ) {
	// $pattern_html = str_replace( $string_to_localize, "' . esc_html__( '" . $string_to_localize . "', '" . $text_domain  . "' ) . '", $pattern_html );
	// }

	// return var_export( $blocks_array, true );
	return $pattern_html;
}
